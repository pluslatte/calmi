use proc_macro::TokenStream;
use quote::quote;
use syn::{DeriveInput, parse_macro_input};

#[proc_macro_derive(MyDerive)]
pub fn my_derive(input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as DeriveInput);
    let name = &input.ident;

    let expanded = quote! {
        impl #name {
            pub fn hello() {
                println!("Hello from {}!", stringify!(#name));
            }
        }
    };

    TokenStream::from(expanded)
}

#[proc_macro_attribute]
pub fn my_attribute(_attr: TokenStream, item: TokenStream) -> TokenStream {
    let input = parse_macro_input!(item as DeriveInput);
    let name = &input.ident;

    let expanded = quote! {
        #input

        impl #name {
            pub fn from_attribute() {
                println!("Generated by attribute macro for {}", stringify!(#name));
            }
        }
    };

    TokenStream::from(expanded)
}

#[proc_macro]
pub fn my_function_like(input: TokenStream) -> TokenStream {
    let input_string = input.to_string();

    let expanded = quote! {
        {
            println!("Function-like macro called with: {}", #input_string);
        }
    };

    TokenStream::from(expanded)
}
